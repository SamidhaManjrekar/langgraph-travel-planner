from pydantic import BaseModel, Field, conint, NonNegativeInt
from typing import List, Optional, Union, Dict, Any, TypedDict


class ExtractedTripInfo(BaseModel):
    source: str = Field(description="Original source city/country.")
    source_iata: str = Field(min_length=3, max_length=3, description="3-letter uppercase IATA airport code for the source.")
    destination: str = Field(description="Original destination city/country.")
    destination_iata: str = Field(min_length=3, max_length=3, description="3-letter uppercase IATA airport code for the destination.")
    hotel_city: str = Field(description="Specific city for hotel booking.")
    departure_date: str = Field(description="Departure date in YYYY-MM-DD format.")
    return_date: str = Field(description="Return date in YYYY-MM-DD format.")
    num_days: conint(ge=1) = Field(description="Calculated number of full days for the trip.")
    no_of_adults: conint(ge=1) = Field(description="Number of adult passengers.")
    no_of_children: NonNegativeInt = Field(default=0, description="Number of children passengers.")
    budget: str = Field(description="Budget preference: 'economy', 'standard', or 'luxury'.")
    activity_preferences: str = Field(description="Comma-separated list of activity preferences.")

class Flight(BaseModel):
    airline: str = Field(description="Name of the airline.")
    departure_time: str = Field(description="Departure time (e.g., '2025-08-01 22:10')")
    arrival_time: str = Field(description="Arrival time (e.g., '2025-08-02 11:15')")
    departure_airport: str = Field(description="Name of the departure airport.")
    arrival_airport: str = Field(description="Name of the arrival airport.")
    price: str = Field(description="Price for this flight leg in USD.")

class Hotel(BaseModel):
    hotel_name: str = Field(description="Name of the hotel.")
    address: str = Field(description="Fictional or real address of the hotel.")
    price_per_night: Optional[str] = Field(None, description="Lowest price per night in USD.")
    rating: Optional[Union[float, str]] = Field(None, description="Overall rating of the hotel.")
    amenities: List[str] = Field(description="List of amenities offered by the hotel (max 5).")
    description: str = Field(description="Concise description of the hotel.")
    perks: str = Field(description="The perks of staying at this hotel.")

class ItineraryActivityDetail(BaseModel):
    activity_name: str = Field(description="Name of the activity.")
    description: str = Field(description="A brief description of the activity.")
    ticket_price: str = Field(description="Estimated ticket price if applicable (e.g., '$45-$80').")
    best_time_to_visit: str = Field(description="Best time to visit for this activity (e.g., 'Morning', 'Afternoon').")

class TravelOption(BaseModel):
    method: str = Field(description="Mode of transport (e.g., 'Subway', 'Bus', 'Taxi').")
    description: str = Field(description="Brief description of the travel mode.")

class ResearchDetail(BaseModel):
    title: str = Field(description="Title of the research section (e.g., 'Weather', 'Customs').")
    notes: str = Field(description="Content of the research section (e.g., 'The weather in Tokyo during August is typically warm and humid...').")
    
class ItineraryItem(BaseModel):
    day: int = Field(description="Day number in the itinerary (e.g., 1, 2, 3).")
    date: str = Field(description="Date of the activity (e.g., '2025-08-01').")
    city: str = Field(description="City where the activities are planned for this date.")
    activities: List[ItineraryActivityDetail] = Field(description="List of activities planned for this date.")

class FullTravelItinerary(BaseModel):
    """Represents a comprehensive travel itinerary generated by the LLM."""
    hotels: List[Hotel] = Field(description="Details of the hotel options, including augmented information.")
    flight: List[Flight] = Field(description="Details of the flight arrangements.")
    itinerary: List[ItineraryItem] = Field(description="Suggested activities, structured by day, date, and city.")
    travel_options: List[TravelOption] = Field(description="Information on local transportation.")
    note: List[ResearchDetail] = Field(description="General research information about the destination, including weather, customs, safety tips, etc.")
    notes_and_warnings: List[str] = Field(description="Any notes or warnings accumulated during the planning process.")
    
class FinalFullTravelItinerary(FullTravelItinerary):
    """The complete and final travel itinerary, including user request summary."""
    user_request_summary: Dict[str, Any] = Field(description="Summary of the initial user request parameters, directly as a dictionary.")


class TravelPlannerState(TypedDict):
    user_info: dict
    flight_results: Optional[dict]
    hotel_results: Optional[Dict[str, Union[List[Dict], str]]]
    destination_info_results: Optional[str]
    final_itinerary: Optional[Dict[str, Any]]
    notes: Optional[List[str]]

class TripRequest(BaseModel):
    source: str = Field(description="The origin city for the trip (e.g., 'Abu Dhabi').")
    destination: str = Field(description="The destination city or country for the trip (e.g., 'Japan').")
    departure_date: str = Field(description="The departure date in YYYY-MM-DD format (e.g., '2025-08-01').")
    return_date: str = Field(description="The return date in YYYY-MM-DD format (e.g., '2025-08-06').")
    activity_preferences: Optional[str] = Field(None, description="Comma-separated list of preferred activities (e.g., 'museums, historical sites, good food, anime').")
    budget: Optional[str] = Field(None, description="Budget preference: 'economy', 'standard', or 'luxury'.")
    no_of_adults: int = Field(1, description="Number of adult travelers.")
    no_of_children: int = Field(0, description="Number of child travelers.")
    

class DestinationInformation(BaseModel):
    """Structured output for destination activities, travel, and research."""
    activities: List[ItineraryActivityDetail] = Field(description="List of suggested activities for the destination.")
    local_travel_options: List[TravelOption] = Field(description="List of common local transportation options.")
    destination_research: List[ResearchDetail] = Field(description="General practical information about the destination.")
